import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

// Fun√ß√£o para criar cliente Supabase com valida√ß√£o
function createSupabaseClient() {
  if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
    throw new Error('Configura√ß√£o do Supabase inv√°lida');
  }
  return createClient(supabaseUrl, supabaseServiceKey);
}

export async function POST(request: Request) {
  console.log('üîî Webhook PixUp recebido');
  
  try {
    // Criar cliente Supabase
    const supabase = createSupabaseClient();
    
    // Validar m√©todo HTTP
    if (request.method !== 'POST') {
      console.log('‚ùå M√©todo HTTP inv√°lido:', request.method);
      return NextResponse.json(
        { error: 'M√©todo n√£o permitido' }, 
        { status: 405 }
      );
    }

    // Parse do corpo da requisi√ß√£o
    let body: any;
    try {
      body = await request.json();
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
      return NextResponse.json(
        { error: 'Corpo da requisi√ß√£o inv√°lido' }, 
        { status: 400 }
      );
    }

    console.log('üì¶ Dados do webhook:', JSON.stringify(body, null, 2));

    // Valida√ß√£o da estrutura do webhook
    if (!body || !body.requestBody) {
      console.log('‚ùå Webhook inv√°lido - sem requestBody');
      return NextResponse.json(
        { error: 'Estrutura do webhook inv√°lida' }, 
        { status: 400 }
      );
    }

    const { requestBody } = body;

    // Valida√ß√£o dos campos obrigat√≥rios
    if (!requestBody.transactionId || !requestBody.status) {
      console.log('‚ùå Campos obrigat√≥rios ausentes');
      return NextResponse.json(
        { error: 'Campos obrigat√≥rios ausentes' }, 
        { status: 400 }
      );
    }

    console.log('üìã Dados da transa√ß√£o:', JSON.stringify(requestBody, null, 2));

    // Verificar se √© uma transa√ß√£o PIX v√°lida
    if (requestBody.transactionType !== 'RECEIVEPIX') {
      console.log('‚ö†Ô∏è Tipo de transa√ß√£o n√£o suportado:', requestBody.transactionType);
      return NextResponse.json(
        { error: 'Tipo de transa√ß√£o n√£o suportado' }, 
        { status: 400 }
      );
    }

    // Salvar dados na tabela pix_status
    const { error: insertError } = await supabase
      .from('pix_status')
      .insert({
        transaction_id: requestBody.transactionId,
        status: requestBody.status,
        created_at: new Date().toISOString()
      });

    if (insertError) {
      console.error('‚ùå Erro ao salvar na tabela pix_status:', insertError);
      return NextResponse.json(
        { error: 'Erro ao salvar dados' }, 
        { status: 500 }
      );
    }

    console.log('‚úÖ Dados salvos na tabela pix_status:', {
      transaction_id: requestBody.transactionId,
      status: requestBody.status
    });

    // Processar baseado no status da transa√ß√£o (opcional - para compatibilidade)
    switch (requestBody.status) {
      case 'PAID':
        console.log('‚úÖ Pagamento confirmado:', requestBody.transactionId);
        break;
        
      case 'PENDING':
        console.log('‚è≥ Pagamento pendente:', requestBody.transactionId);
        break;
        
      case 'EXPIRED':
        console.log('‚è∞ Pagamento expirado:', requestBody.transactionId);
        break;
        
      case 'CANCELLED':
        console.log('‚ùå Pagamento cancelado:', requestBody.transactionId);
        break;
        
      default:
        console.log('‚ö†Ô∏è Status n√£o tratado:', requestBody.status);
        break;
    }

    console.log('‚úÖ Webhook processado com sucesso');
    return NextResponse.json({ message: "OK" }, { status: 200 });

  } catch (error) {
    console.error('üí• Erro ao processar webhook:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}

// M√©todo GET para verificar se o webhook est√° funcionando
export async function GET() {
  console.log('üîç Verifica√ß√£o de sa√∫de do webhook');
  return NextResponse.json({ 
    status: 'ok', 
    message: 'Webhook PixUp est√° funcionando',
    timestamp: new Date().toISOString()
  });
} 